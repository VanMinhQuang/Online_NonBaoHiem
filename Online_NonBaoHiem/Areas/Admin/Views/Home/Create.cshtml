@model Online_NonBaoHiem.Models.Helmet

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Helmet</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.IdCategory, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.IdCategory, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.IdCategory, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.HelmetName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.HelmetName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HelmetName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Thumbnail, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Thumbnail, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Thumbnail, "", new { @class = "text-danger" })
            <input type="file" name="fileUpload" id="fileUpload" accept="image/*"
                   style="display:none;" />
            <input type="button" id="btnUpload" value="Chọn" class="btn btn-success" />
            <img src="" id="pictureUpload" />
        </div>
    </div>

    @section upload
            {
        <script>
                    $(function () {
                        $('#btnUpload').click(function () {
                            $('#fileUpload').trigger('click');
                        });
                    });
                    $('#fileUpload').change(function () {
                        if (window.FormData !== undefined) {
                            var fileUpload = $('#fileUpload').get(0);
                            var files = fileUpload.files;
                            var formData = new FormData();
                            formData.append('file', files[0]);

                            $.ajax(
                                {
                                    type: 'POST',
                                    url: '/Sach/ProcessUpload',
                                    contentType: false,
                                    processData: false,
                                    data: formData,
                                    success: function (urlImage) {

                                        $('#pictureUpload').attr('src', urlImage);
                                        $('#hinh').val(urlImage);
                                    },
                                    error: function (err) {
                                        alert('Error ', err.statusText);

                                        19

                                    }
                                });
                        }
                    });
        </script>
    }
    <div class="form-group">
        @Html.LabelFor(model => model.UpdateTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UpdateTime, new { htmlAttributes = new { @class = "form-control" , @type ="date"} })
            @Html.ValidationMessageFor(model => model.UpdateTime, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Quanity, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Quanity, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Quanity, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
